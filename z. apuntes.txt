Para comenzar a trabajar: npm start en api

Inicio: 13 de abril. 
PI descargado. Dejo una copia del BLANK en z. PI-Food-BLANK.
Repositorio git inicializado y sincronizado con gitHub. 
Archivo .env creado (falta el puerto).
DB food creada. 

Dudas:
- Por ahora los endpoints me muestran un 401, es porque para hacer requests tengo que hacerlo con la apikey creada? 
- Cuántas requests diarias puedo hacer? Me conviene guardar todo en mi DB hasta que termine el desarrollo? 
- index de routes. // Configurar los routers // Ejemplo: router.use('/auth', authRouter); // ??
- Cómo hago para ver TODOS los resultados al hacer el llamado a la API? No sé ni siquiera cuántos recipes hay. 


DB: relación many-to-many entre modelos Recipe y Diets. Comentados porque todavía no creé los modelos. 
DB: crear dos modelos -> recetas y dietas. 
npm i dentro de api
npm start. Levanta bien el server (dice Listening on port 3001 y Connected to DB). 
model Recipe: bien conectado con DB. Si le agrego atributos, se actualiza correctamente. 

Consignas: 
API: https://spoonacular.com/food-api
enpoints permitidos: 
https://api.spoonacular.com/recipes/complexSearch
https://api.spoonacular.com/recipes/complexSearch&addRecipeInformation=true
tipos de dieta: propiedades vegetarian, vegan, glutenFree, las incluidas en propiedad diets. 
https://api.spoonacular.com/recipes/{id}/information

Buscar recetas.
Visualizar la información de las recetas.
Filtrarlas.
Ordenarlas.
Crear nuevas recetas.
Filtrado y ordenamiento: no se pueden usar endpoints de api externa. 

commit added model Recipe
cambié Diets por Diet en archivo db.js

Creé la primera ruta. GET | /recipes/:idRecipe todavía sin implementar.
Probé la ruta en Postman y funciona. 
Por ahora, no modularizar. 
Siguiente paso: implementar esta ruta para ver si funcionan las requests a la api externa y si puedo combinarlo con la db. 
Instalé axios dentro de api. 
Cambié api_key como estaba en la consinga por apiKey, que es lo que indica la documentación de la API externa. 
La request a la API externa funciona correctamente. Guardé la response en archivo resExamp.json por si me quedo sin requests por día. 
En modelo Recipe, cambié el atributo healthScore por healthscore (minúscula).
Creé un primer registro en la tabla Recipes mediante sql shell. El código para hacerlo está en el archivo index de routes. Seteé force en true en archivo index general. 
Terminé la implementación de la primera ruta. Para no hacer requests por error a la API externa, dejé comentado el else de la primera ruta. 
Siguiente paso: seguir trabajando en archivo index de routes. Pasar a la segunda ruta. A futuro, modularizar. 

Creé la segunda ruta. '/recipes' con query name . Interpreté que es de esta manera aunque la consigna ubica el ? después del name en vez de ubicarlo antes. 
Implementé guardar las recetas que coinciden con el name del query provenientes de la DB. 
Siguiente paso: guardar las provenientes de la API externa. 
Guardé la response de la API externa al request general de recipes en mi archivo resExample.json. 
Implementé el llamado a la API externa. 
Agregué esta request a Postman. 
Implementé la segunda ruta '/recipes' con query name . No sé si busca otros nombres de la API externa porque todavía no sé cómo ver todos los recipes (tal vez debería buscar alguno por id para luego chequear si viene también buscando por su name). 
A futuro implementar que busque con mayúsculas o minúsculas y que la búsqueda no requiera ser exacta. 

Siguiente paso: tercera ruta. 
Armé la request en Postman. 
Desestructuré los datos que llegan por body en la ruta. 
Con el método create del modelo, creé una recipe en la ruta. Para verla en la DB, recordar apretar enter hasta que aparezca el registro. 
Para ver DB en psql, al ser varios registros, recordar \x para ver con claridad. 
En la función que crea el modelo (archivo Recipe.js), agregué el atributo diets. 
A futuro rever diets en Recipe.js, en ruta GET /recipes , en ruta POST /recipes y en Postman. 